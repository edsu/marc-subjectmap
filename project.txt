Hi Jane:

My apologies for getting this to you late. My family and I were quite
ill with a stomach flu last week and I didn't manage to get done what I
had planned on. However I had some time to think about the project, and
to come up with a task list with estimates. 

First let me just reiterate what the delieverables will be:

1. A program I'm going to call lcsh-template (for lack of a better name
right now) which will accept some command line arguments and a batch of MARC
records. This program will generate the XML file that you emailed me,
with the missing spots for the Spanish translation, and the source of
the translation. The program will be run like so:

    lcsh-template --in=file.dat --copy=600aq --translate=600xyzv --copy=610ab
        --translate=610xyvz ...

It will only extract information from LCSH subject headings. Your team
will fill in the template with the appropriate translations and note the
source of the translations.

2. A program called lcsh-trans which reads the XML configuration file, and 
reads in a batch of MARC records performing translations on LCSH subject heading
subfields, and writing out a new file of MARC records. 

    lcsh-trans --in=in.dat --out=out.dat --config=config.xml --log=log.txt

An appropriate new field will be added if *all* portions of the original
English subject have either a Spanish equivalent, or the contents are to
be copied. In addition a subfield 2 will be added indicating the source
of the translation. If a subfield lacks an English language translation
and isn't to be copied then it will be printed to a log file for review
later so that the configuration file can be improved.

These programs will be fairly simple since most of the harder work will
be abstracted out into a few modules. Here are some details about the 
modules in case you are interested:

LCSH::Translate - class for reading config and executing translations
new()           # constructor
read($file)     # read the configuration from XML 
write($file)    # write the config file as XML        
addField()      # add a LCSH::Field 
getFields()     # returns a list of LCSH::Field objects
addRule($m)     # add a translation rule, LCSH::Rule
getRule()       # lookup a rule
translate($f)   # accepts a MARC::Field and returns a new one 

LCSH::Translate::Field - class for representing field/subfields to examine
new()           # constructor
tag()           # the tag number
translate()     # a list of subfields that will be translated
copy()          # a list of subfields that will be copied

LCSH::Translate::Rule - a class for representing a particular translation rule
new()           # constructor
field()         # the field tag number (600)
subfield()      # the particular subfield the rule applies to (x)
original()      # the original value (Biography)
translation()   # the translated value (Biografia)
source()        # source of the translation (SFPL)

LCSH::Translate::Logger - a singleton for writing to the log
new()           # constructor
write()         # write out message to the log

Internal to LCSH::Translate will be some sort of hashed storage that
will allow lookup by a field/subfield/value which will point to a
LCSH::Translate::Rule object. It may be that this needs to be disk based
hash due to the amount of values.

--

So, here is my estimate. Like the last job I did for you this is open to
negotiation...but it represents my best guess at the work and the amount 
of time it will take. These tasks are listed in the order they will be
performed.

LCSH::Translate::Rule            6 hrs
LCSH::Field                      2 hrs
LCSH::Translate 
  basic accessors                2 hrs
  write()                        4 hrs
  read()                         5 hrs
  translate()                    5 hrs
  storage (memory vs. disk)      2 hrs
lcsh-template                    6 hrs
LCSH::Logger                     1 hr
lcsh-translate                   6 hrs
acceptance testing              10 hrs
TOTAL TIME                      48 hrs 
TOTAL COST                      * 60 hr = $2880.00

I look forward to hearing back from you, and won't start work till I
hear what you think :-)

//Ed
